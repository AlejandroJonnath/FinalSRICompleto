// =========================================================
// SECCI칍N: Variables globales
// =========================================================

let productoIdAEliminar = null; // Variable global que guarda el ID del producto a eliminar (evita eliminar sin confirmar)

// =========================================================
// SECCI칍N: Funci칩n para mostrar el modal de confirmaci칩n de eliminaci칩n
// =========================================================

function confirmarEliminacion(id) {
    productoIdAEliminar = id; // Guarda el ID del producto que se quiere eliminar
    document.getElementById('modalEliminar').style.display = 'flex'; // Muestra el modal de eliminaci칩n usando CSS (display: flex)
}

// 游댮 Impacto: Si esta funci칩n se modifica incorrectamente, el modal no se mostrar치, y el producto no se marcar치 para eliminaci칩n.

// =========================================================
// SECCI칍N: Funci칩n para cerrar el modal de eliminaci칩n
// =========================================================

function cerrarModal() {
    productoIdAEliminar = null; // Limpia el ID seleccionado
    document.getElementById('modalEliminar').style.display = 'none'; // Oculta el modal de confirmaci칩n
}

// 游댮 Impacto: Si no se limpia `productoIdAEliminar`, podr칤a eliminarse un producto anterior por error.

// =========================================================
// SECCI칍N: Funci칩n que redirige al backend para eliminar el producto
// =========================================================

function eliminarProducto() {
    if (productoIdAEliminar !== null) { // Verifica que se haya seleccionado un producto
        window.location.href = 'deleteProduct?id=' + productoIdAEliminar; // Redirige al servlet con el ID del producto
    }
}

// 游댮 Impacto: Si se cambia el nombre del par치metro `id`, el backend no recibir치 correctamente el producto a eliminar.

// =========================================================
// SECCI칍N: Validaci칩n de cantidad al comprar
// =========================================================

function validarCantidad(form) {
    const cantidadInput = form.querySelector('input[name="cantidad"]'); // Obtiene el input de cantidad dentro del formulario
    const cantidad = parseInt(cantidadInput.value); // Convierte el valor ingresado a n칰mero entero
    const stock = parseInt(cantidadInput.getAttribute('data-stock')); // Obtiene el stock m치ximo desde el atributo personalizado

    // Verifica que la cantidad sea v치lida (no vac칤a, no negativa, mayor a 0)
    if (isNaN(cantidad) || cantidad < 1) {
        alert("Ingresa una cantidad v치lida (mayor o igual a 1)."); // Muestra alerta si no es v치lida
        return false; // Detiene el env칤o del formulario
    }

    // Verifica que la cantidad no supere el stock disponible
    if (cantidad > stock) {
        document.getElementById('modalStockError').style.display = 'flex'; // Muestra modal de error si excede stock
        return false; // Cancela el env칤o del formulario
    }

    return true; // Todo correcto, permite enviar el formulario
}

// 游댮 Impacto: Si se elimina esta validaci칩n, los usuarios podr칤an intentar comprar cantidades mayores al stock disponible,
// causando errores en el backend y desbordes l칩gicos.

// =========================================================
// SECCI칍N: Cierra el modal de stock excedido
// =========================================================

function cerrarModalStock() {
    document.getElementById('modalStockError').style.display = 'none'; // Oculta el modal de error de stock
}

// 游댮 Impacto: Si se elimina, el modal de stock no se podr치 cerrar y afectar치 la experiencia de usuario.
